@startuml

package "Dart Todo Application" {
  class Todo {
    + int userId
    + int id
    + String title
    + bool completed
    + DateTime createdAt
    --
    + factory Todo.fromJson(Map<String, dynamic>)
    + Map<String, dynamic> toJson()
    + Todo copyWith({int? userId, int? id, String? title, bool? completed, DateTime? createdAt})
    + bool operator ==(Object other)
    + int get hashCode
    + String toString()
  }

  class TodoDataSourceImpl implements TodoDataSource {
  }

  interface TodoDataSource {
      + Future<List<Map<String, dynamic>>> readTodos()
      + Future<bool> writeTodo(Map<String, dynamic> todo)
    }

  interface FileDefaultDataSource {
    - Future<bool> createFileIfNotExists() # /data/todos.json
    - Future<String> getFile(String path)
    - Future<bool> writeFile(String path)
  }

  class FileDefaultDataSourceImpl implements FileDefaultDataSource {
  }

  class TodoRepository {
    - TodoDataSource _todoDataSource
    - FileDefaultDataSource _fileDefaultDataSource
    --
    + Future<List<Todo>> getTodos({bool? isAscending, bool? isCompleted}) # 목록 보기
    + Future<bool> addTodo(String title) # 할일 추가
    + Future<Todo> updateTodo(int id, String newTitle) # 할일 수정
    + Future<bool> toggleTodo(int id) # 완료 상태 토글
    + Future<bool> deleteTodo(int id) # 할일 삭제
    + Future<int> getLastIndex() # id # 자동 증가
  }

  interface LogRepository {
    - LogDataSource _logDataSource
    --
    + Future<bool> saveLog(String log) # 로그 파일 저장
  }

  class LogDataSourceImpl implements LogDataSource {
      - static const String _filePath
  }

  interface LogDataSource {
      --
      - Future<bool> writeLog()
      - Future<String> readLog()
  }

  class LogRepositoryImpl implements LogRepository {}
}

@enduml